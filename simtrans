#!/bin/bash -e

## simtrans
##
## 	Given a regular expression, extract all simta logfile
##	entries	for the transaction(s) associated with that
##	expression.
##
##	This is useful when you have an anomalous env {D,E}
##	<MID> file pair from the simta spool and you want
##	a bigger picture of what the sender was doing.

if [[ -z $logfile ]]; then
    [[ -f /var/log/mail ]] && logfile=/var/log/mail
    [[ -f /var/log/maillog ]] && logfile=/var/log/maillog
fi

## In case we're handed an IP address as our search pattern, we
## need to exclude the parent process logging the child creation,
## as we don't want the transaction ID of the parent.  E.g.,
## '7642.1293473885' is the parent tid and '18540.1479841596' is the
## child tid here:
#
# simta[7642.1293473885]: Child: launched smtp receive process 18540.1479841596 for 172.31.33.218
# simta[7642.1293473885]: Child: smtp receive process 18540.1479841596 for 172.31.33.218 exited 0
#
## Note that there are two lines containing 'Connect.stat' for
## each session, one from the child and one from the parent,
## we must weed out those as well.
#
# simta[7642.1293473885]: Connect.stat

tmpfile=$(mktemp /tmp/simtrans.XXXXXXXX)
grep="fgrep"
cat="cat"

if { echo $logfile | grep -q "xz$"; }; then
    grep="xzfgrep"
    cat="xzcat"
fi

for pattern in "$@" ; do
    $cat $logfile | awk -v p="$pattern" '
	( $0 ~ p ) && ( $3 ~ /^simta\[.*\]:$/ ) &&
	( $4 != "Child:" ) &&
	( $4 !~ /Connect\.stat/ ) {
	    t=$3;
	    gsub(/simta\[|\]:/, "", t);
	    tid[t]++;
	}
	END {
	    for ( t in tid ) print t;
	}'
done >| $tmpfile

$grep -f $tmpfile $logfile
rm -f $tmpfile

## Instead of a straight fgrep, we might want to consider
## grepping for  "simta\[${tid}\]:" plus " ${tid}:? ".
## The fgrep has the possibility of false positives.
